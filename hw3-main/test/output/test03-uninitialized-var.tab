
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(declartions -> )
program ab(cd,ef,gh);

 
Reduction(identifier_list -> ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
var ij:integer;

Reduction(subprogram_declarations -> )
Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(standard_type -> INTEGER)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
    function  kl(mn:integer):integer; 
Reduction(subprogram_declarations -> )
    begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
    op := ij+mn
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
    end;

begin

Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
GTOP 71
Reduction(relop -> GT )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
if ij > 1 
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression relop simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
then op := 1 
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
else op := 2

Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statement -> IF expression THEN statement ELSE statement )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
id str (null)
From here
0
Reduction(prog -> PROGRAM ID ( identifier_list ) ; declartions subprogram_declartionscompound_statement.)
create a scope
end.
