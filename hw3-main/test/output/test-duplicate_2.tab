
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(declartions -> )
PROGRAM aa(input, output, error); 
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
VAR a, b: INTEGER;
Reduction(identifier_list -> ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
VAR c: REAL;

Reduction(subprogram_declarations -> )
Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(standard_type -> INTEGER)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
FUNCTION aaa(a, b: INTEGER) : INTEGER;
Reduction(subprogram_declarations -> )
BEGIN
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
    aaa := 3
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
END;

Reduction(arguments ->  )
Reduction(standard_type -> INTEGER)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
FUNCTION bb : INTEGER;
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
VAR a, b, c : INTEGER;
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
VAR d, a, e : REAL;     
Reduction(subprogram_declarations -> )
BEGIN
Reduction(optional_statements ->  )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
END;

Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(standard_type -> REAL)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
FUNCTION aaa(a, b: INTEGER) : REAL;  
Reduction(subprogram_declarations -> )
BEGIN
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
    aaa := 3.3
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
END;

BEGIN
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
    a := 333
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
id str (null)
From here
0
Reduction(prog -> PROGRAM ID ( identifier_list ) ; declartions subprogram_declartionscompound_statement.)
create a scope
END.
