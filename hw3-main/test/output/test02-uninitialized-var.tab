
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(declartions -> )
PROGRAM foo(input, output, error) ;
   
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var a, b, c: integer;
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var d, e: array [ 1 .. 10 ] of integer; 
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var g, h: real;

   
Reduction(identifier_list -> ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var g: array [ 23 .. 57 ] of array [ 23 .. 57 ] of array [ 23 .. 57 ] of array [ 23 .. 57 ] of array [ 23 .. 57 ] of real; 
 
Reduction(identifier_list -> ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var k: array [ 23 .. 57 ] of array [ 23 .. 57 ] of real; 

Reduction(subprogram_declarations -> )
   begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
      a := a + 1;  
                   
                   
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
      k[25][20] := k[25][20] + 3.14  
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
id str (null)
From here
0
Reduction(prog -> PROGRAM ID ( identifier_list ) ; declartions subprogram_declartionscompound_statement.)
create a scope
   end.   
