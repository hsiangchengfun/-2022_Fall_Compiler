







Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(declartions -> )
PROGRAM foo(input, output, error) ;
   
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var a, b, c: integer;
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var d, e: array [ 1 .. 10 ] of integer; 
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var g, h: real;
Reduction(identifier_list -> ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var k: array [ 23 .. 57 ] of array [ 23 .. 57 ] of real; 
Reduction(identifier_list -> ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var a: array [ 23 .. 57 ] of array [ 23 .. 57 ] of real;  


   
Reduction(subprogram_declarations -> )
Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
From here
0
Reduction(standard_type -> INTEGER)
From here
0
Reduction(standard_type -> INTEGER)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(type -> ARRAY ( NUM .. NUM ) OF type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(subprogram_head -> PROCEDURE ID arguments)
Reduction(declartions -> )
   procedure sort(a: array [ 1 .. 10 ] of integer);
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
      var a, b, c: integer; 
Reduction(subprogram_declarations -> )
      begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
        e := a + d;        
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> MINUS )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
	a := qqq - rrr;   
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression_list COMMA expression )
Reduction(factor -> ID ( expression_list ) )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
        d := f(k, e);     
Reduction(statement ->  )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
      end;


Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(standard_type -> INTEGER)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
   function  addition(a, b: integer) : integer;
Reduction(identifier_list -> ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
      var c: integer;  
Reduction(subprogram_declarations -> )
      begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
         addition := a + b   
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
      end;


Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(standard_type -> INTEGER)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
   function  addition(c, d: integer) : integer;
   
Reduction(identifier_list -> ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
      var e: integer;  
Reduction(subprogram_declarations -> )
      begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
         addition := c + d   
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
      end;


Reduction(optional_var ->  )
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(parameter_list -> optional_var identifier_list : type )
Reduction(arguments -> ( parameter_list ) )
Reduction(standard_type -> REAL)
Reduction(subprogram_head -> FUNCTION ID arguments : standard_type ;)
Reduction(declartions -> )
   function  addition(a, b: real) : real;
   
Reduction(identifier_list -> ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
      var c: integer;  
Reduction(subprogram_declarations -> )
      begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
         addition := a + b   
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
      end;


   begin
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
      a := 1;
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
LTOP 71
Reduction(relop -> LT )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression relop simple_expression )
Reduction(expression -> boolexpression )
      while a < 10 do
      begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
         sum := sum + a;
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
         a   := a + 1 
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(statement -> compound_statement )
Reduction(statement -> WHILE expression DO statement )
Reduction(statements_list -> statement_list ; statement )
      end;
      begin  
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
         b := 1;
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
LTOP 71
Reduction(relop -> LT )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression relop simple_expression )
Reduction(expression -> boolexpression )
         while b < 11 do
         begin  
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(mulop -> STAR )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> MINUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(factor -> ( expression ) )
Reduction(term -> term mulop factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
            d[b] := b + b * (b - 1);
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
            b := b +1
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(statement -> compound_statement )
Reduction(statement -> WHILE expression DO statement )
Reduction(statements_list -> statement_list ; statement )
         end;
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression )
Reduction(procedure_statement -> ID ( expression_list ) )
Reduction(statement -> procedure_statement )
Reduction(statements_list -> statement_list ; statement )
         sort(d)   
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(statement -> compound_statement )
Reduction(statements_list -> statement_list ; statement )
      end;
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      k[25][26] := 3;        
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      k[25][26] := 3.14;     
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      k[25][26] := k[25][26] + 3;     
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      k[25][126]  := 3.14;   
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      k[125][26]  := 3.14;   
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      k[125][126] := 3.14;   
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression_list COMMA expression )
Reduction(factor -> ID ( expression_list ) )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      a := extf(20, sum);    



      
   
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(expression_list -> expression_list COMMA expression )
Reduction(factor -> ID ( expression_list ) )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
        a := bbb(20, sum);



       
 
      
      
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
       k[25][26] := k[25][26] + 5;     
      
      
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
       k[25][26] := k[25][26] + 333;     
      
      
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(tail -> ( expression ) tail )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
       k[25][26] := k[25][26] + 6666;     
      
      




       
       
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
       b := 1;
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
LETOP 71
Reduction(relop -> LE )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression relop simple_expression )
Reduction(expression -> boolexpression )
       while b <= k do
       begin
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(tail -> )
Reduction(tail -> ( expression ) tail )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
         sum := sum + a[b];
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
         b   := b + 1 
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
Reduction(statement -> compound_statement )
Reduction(statement -> WHILE expression DO statement )
Reduction(statements_list -> statement_list ; statement )
       end;


Reduction(statement ->  )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
id str (null)
From here
0
Reduction(prog -> PROGRAM ID ( identifier_list ) ; declartions subprogram_declartionscompound_statement.)
create a scope
   end.   
