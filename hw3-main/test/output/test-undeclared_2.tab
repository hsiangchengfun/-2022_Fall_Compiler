
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(declartions -> )
PROGRAM aa(input, output, error); 
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
VAR a, b: INTEGER;
Reduction(identifier_list -> ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
VAR c: REAL;

Reduction(subprogram_declarations -> )
Reduction(arguments ->  )
Reduction(subprogram_head -> PROCEDURE ID arguments)
Reduction(declartions -> )
PROCEDURE xxx;
Reduction(subprogram_declarations -> )
BEGIN
Reduction(optional_statements ->  )
Reduction(compound_statement -> begin optional_statements END )
Reduction(subprogram_declaration -> subprogram_head declarations compound_statement)
create a scope
Reduction(subprogram_declarations -> subprogram_declarations subprogram_declaration ;)
END;

BEGIN
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
    a := 3;
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> PLUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(addop -> PLUS )
Reduction(tail -> )
Reduction(factor -> ID tail )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
    b := a+4+d;  
Reduction(procedure_statement -> ID )
Reduction(statement -> procedure_statement )
Reduction(statements_list -> statement_list ; statement )
Reduction(procedure_statement -> ID )
Reduction(statement -> procedure_statement )
Reduction(statements_list -> statement_list ; statement )
    xxx;ooo;xxx  
Reduction(procedure_statement -> ID )
Reduction(statement -> procedure_statement )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
id str (null)
From here
0
Reduction(prog -> PROGRAM ID ( identifier_list ) ; declartions subprogram_declartionscompound_statement.)
create a scope
END.
