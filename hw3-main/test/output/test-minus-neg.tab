
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(declartions -> )
PROGRAM foo(input, output, error) ;
Reduction(identifier_list -> ID)
Reduction(identifier_list -> identifier_list , ID)
Reduction(standard_type -> INTEGER)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var a,c: integer;
Reduction(identifier_list -> ID)
Reduction(standard_type -> REAL)
Reduction(type -> standard_type)
Reduction(declartions -> declarations VAR identifier_list : type ;)
   var b: real;
Reduction(subprogram_declarations -> )
   begin
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(factor -> ( SUBOP factor ) )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> MINUS )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(term -> factor )
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement )
      a := -3-4;
Reduction(tail -> )
Reduction(variable -> ID tail )
From here
0
Reduction(standard_type -> INTEGER)
Reduction(factor -> NUM )
Reduction(factor -> ( SUBOP factor ) )
Reduction(factor -> ( SUBOP factor ) )
Reduction(factor -> ( SUBOP factor ) )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
      c := ---5;   
Reduction(tail -> )
Reduction(variable -> ID tail )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(factor -> ( SUBOP factor ) )
Reduction(term -> factor )
Reduction(simple_expression -> term )
Reduction(addop -> MINUS )
Reduction(standard_type -> REAL)
Reduction(factor -> NUM )
Reduction(term -> factor )
      b := -5.0-6.0
Reduction(simple_expression -> simple_expression addop term )
Reduction(boolexpression -> simple_expression )
Reduction(expression -> boolexpression )
Reduction(statement -> variable := expression )
Reduction(statements_list -> statement_list ; statement )
Reduction(optional_statements -> statement_list )
Reduction(compound_statement -> begin optional_statements END )
id str (null)
From here
0
Reduction(prog -> PROGRAM ID ( identifier_list ) ; declartions subprogram_declartionscompound_statement.)
create a scope
   end.

